
custom.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000690  00000724  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000690  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800106  00800106  0000072a  2**0
                  ALLOC
  3 .stab         0000213c  00000000  00000000  0000072c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000147f  00000000  00000000  00002868  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e9       	ldi	r30, 0x90	; 144
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 31       	cpi	r26, 0x18	; 24
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 46 03 	jmp	0x68c	; 0x68c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include <util/delay.h>

int main() 
{
	/* set PORTB for output*/
	DDRB = 0xFF;
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	84 b9       	out	0x04, r24	; 4
	/* set PORTD for input*/
	DDRD &= ~_BV(PORTD2);
  aa:	52 98       	cbi	0x0a, 2	; 10
	PORTD |= _BV(PORTD2);
  ac:	5a 9a       	sbi	0x0b, 2	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ae:	20 e9       	ldi	r18, 0x90	; 144
  b0:	31 e0       	ldi	r19, 0x01	; 1
#include <stdio.h>
#include <avr/io.h>
#include <util/delay.h>

int main() 
{
  b2:	88 ee       	ldi	r24, 0xE8	; 232
  b4:	93 e0       	ldi	r25, 0x03	; 3
  b6:	f9 01       	movw	r30, r18
  b8:	31 97       	sbiw	r30, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <main+0x12>
  bc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  be:	d9 f7       	brne	.-10     	; 0xb6 <main+0x10>
	
	int dance = 0;
	while (1) 
	{
		_delay_ms(100);
		if (PIND & _BV(PORTD2))
  c0:	4a 99       	sbic	0x09, 2	; 9
  c2:	03 c0       	rjmp	.+6      	; 0xca <main+0x24>
		{
			dance = ~dance;
		}
		if (dance == 0)
		{
			PORTB |= _BV(PORTB0);
  c4:	28 9a       	sbi	0x05, 0	; 5
			PORTB |= _BV(PORTB5);
  c6:	2d 9a       	sbi	0x05, 5	; 5
  c8:	f4 cf       	rjmp	.-24     	; 0xb2 <main+0xc>
	
	int dance = 0;
	while (1) 
	{
		_delay_ms(100);
		if (PIND & _BV(PORTD2))
  ca:	60 e0       	ldi	r22, 0x00	; 0
  cc:	70 e0       	ldi	r23, 0x00	; 0
#include <stdio.h>
#include <avr/io.h>
#include <util/delay.h>

int main() 
{
  ce:	40 e0       	ldi	r20, 0x00	; 0
  d0:	50 e0       	ldi	r21, 0x00	; 0
			for (a = 0 ; a < 5; a++)
			{
				int b;
				for (b = 0; b <= a; b++)
				{
					PORTB |= _BV(PORTB0);
  d2:	28 9a       	sbi	0x05, 0	; 5
					PORTB &= ~_BV(PORTB5);
  d4:	2d 98       	cbi	0x05, 5	; 5
  d6:	84 ef       	ldi	r24, 0xF4	; 244
  d8:	91 e0       	ldi	r25, 0x01	; 1
  da:	f9 01       	movw	r30, r18
  dc:	31 97       	sbiw	r30, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <main+0x36>
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	d9 f7       	brne	.-10     	; 0xda <main+0x34>
					
					_delay_ms(50);
					
					PORTB &= ~_BV(PORTB0);
  e4:	28 98       	cbi	0x05, 0	; 5
					PORTB |= _BV(PORTB5);
  e6:	2d 9a       	sbi	0x05, 5	; 5
		{
			int a;
			for (a = 0 ; a < 5; a++)
			{
				int b;
				for (b = 0; b <= a; b++)
  e8:	4f 5f       	subi	r20, 0xFF	; 255
  ea:	5f 4f       	sbci	r21, 0xFF	; 255
  ec:	64 17       	cp	r22, r20
  ee:	75 07       	cpc	r23, r21
  f0:	84 f7       	brge	.-32     	; 0xd2 <main+0x2c>
			PORTB |= _BV(PORTB5);
		}
		else
		{
			int a;
			for (a = 0 ; a < 5; a++)
  f2:	6f 5f       	subi	r22, 0xFF	; 255
  f4:	7f 4f       	sbci	r23, 0xFF	; 255
  f6:	65 30       	cpi	r22, 0x05	; 5
  f8:	71 05       	cpc	r23, r1
  fa:	49 f7       	brne	.-46     	; 0xce <main+0x28>
  fc:	da cf       	rjmp	.-76     	; 0xb2 <main+0xc>

000000fe <init_timer1>:
void (*error_call)(void);


void init_timer1(void (*callback)(void), void (*error_callback)(void))
{
	num_interrupts = 0;
  fe:	10 92 0a 01 	sts	0x010A, r1
 102:	10 92 0b 01 	sts	0x010B, r1
 106:	10 92 0c 01 	sts	0x010C, r1
 10a:	10 92 0d 01 	sts	0x010D, r1
	TCCR1B = _BV(CS10); /*no prescaling(table 15-5)*/
 10e:	e1 e8       	ldi	r30, 0x81	; 129
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	21 e0       	ldi	r18, 0x01	; 1
 114:	20 83       	st	Z, r18
	TCCR1B |= _BV(WGM12); /*  set ctc mode (table 15-4) */
 116:	20 81       	ld	r18, Z
 118:	28 60       	ori	r18, 0x08	; 8
 11a:	20 83       	st	Z, r18
	OCR1A = F_CPU / SAMPLE_RATE; /*set the output compare register */
 11c:	20 e4       	ldi	r18, 0x40	; 64
 11e:	3f e1       	ldi	r19, 0x1F	; 31
 120:	30 93 89 00 	sts	0x0089, r19
 124:	20 93 88 00 	sts	0x0088, r18
	TIMSK1 |= _BV(OCIE1A); /*enable compare A match interrupt 15.11.8*/ 
 128:	ef e6       	ldi	r30, 0x6F	; 111
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	20 81       	ld	r18, Z
 12e:	22 60       	ori	r18, 0x02	; 2
 130:	20 83       	st	Z, r18

	call = callback;
 132:	90 93 07 01 	sts	0x0107, r25
 136:	80 93 06 01 	sts	0x0106, r24
	error_call  = error_callback;
 13a:	70 93 09 01 	sts	0x0109, r23
 13e:	60 93 08 01 	sts	0x0108, r22

	sei(); /* enable interrupts */
 142:	78 94       	sei
}
 144:	08 95       	ret

00000146 <__vector_11>:

ISR(TIMER1_COMPA_vect)
{
 146:	1f 92       	push	r1
 148:	0f 92       	push	r0
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	0f 92       	push	r0
 14e:	11 24       	eor	r1, r1
 150:	2f 93       	push	r18
 152:	3f 93       	push	r19
 154:	4f 93       	push	r20
 156:	5f 93       	push	r21
 158:	6f 93       	push	r22
 15a:	7f 93       	push	r23
 15c:	8f 93       	push	r24
 15e:	9f 93       	push	r25
 160:	af 93       	push	r26
 162:	bf 93       	push	r27
 164:	ef 93       	push	r30
 166:	ff 93       	push	r31
	num_interrupts++;
 168:	80 91 0a 01 	lds	r24, 0x010A
 16c:	90 91 0b 01 	lds	r25, 0x010B
 170:	a0 91 0c 01 	lds	r26, 0x010C
 174:	b0 91 0d 01 	lds	r27, 0x010D
 178:	01 96       	adiw	r24, 0x01	; 1
 17a:	a1 1d       	adc	r26, r1
 17c:	b1 1d       	adc	r27, r1
 17e:	80 93 0a 01 	sts	0x010A, r24
 182:	90 93 0b 01 	sts	0x010B, r25
 186:	a0 93 0c 01 	sts	0x010C, r26
 18a:	b0 93 0d 01 	sts	0x010D, r27
	if (call != NULL)
 18e:	e0 91 06 01 	lds	r30, 0x0106
 192:	f0 91 07 01 	lds	r31, 0x0107
 196:	30 97       	sbiw	r30, 0x00	; 0
 198:	09 f0       	breq	.+2      	; 0x19c <__vector_11+0x56>
		call();
 19a:	09 95       	icall
	
	if (TIFR1 & _BV(OCF1A)) {
 19c:	b1 9b       	sbis	0x16, 1	; 22
 19e:	07 c0       	rjmp	.+14     	; 0x1ae <__vector_11+0x68>
		//another interrupt occurred
		//while we were handling this interrupt! BAD!
		if (error_call != NULL) {
 1a0:	e0 91 08 01 	lds	r30, 0x0108
 1a4:	f0 91 09 01 	lds	r31, 0x0109
 1a8:	30 97       	sbiw	r30, 0x00	; 0
 1aa:	09 f0       	breq	.+2      	; 0x1ae <__vector_11+0x68>
	      
			error_call();
 1ac:	09 95       	icall
		}
		
	}
	
}
 1ae:	ff 91       	pop	r31
 1b0:	ef 91       	pop	r30
 1b2:	bf 91       	pop	r27
 1b4:	af 91       	pop	r26
 1b6:	9f 91       	pop	r25
 1b8:	8f 91       	pop	r24
 1ba:	7f 91       	pop	r23
 1bc:	6f 91       	pop	r22
 1be:	5f 91       	pop	r21
 1c0:	4f 91       	pop	r20
 1c2:	3f 91       	pop	r19
 1c4:	2f 91       	pop	r18
 1c6:	0f 90       	pop	r0
 1c8:	0f be       	out	0x3f, r0	; 63
 1ca:	0f 90       	pop	r0
 1cc:	1f 90       	pop	r1
 1ce:	18 95       	reti

000001d0 <microsecond>:

uint32_t microsecond() 
{
 1d0:	1f 93       	push	r17
	/*turn off interrupts while we get the time */
	uint8_t oldSREG = SREG;
 1d2:	1f b7       	in	r17, 0x3f	; 63
	cli();
 1d4:	f8 94       	cli
	
	uint32_t ret_val;
	if (TIFR1 & _BV(TOV1)) /* latest interrupt hasn't been counted yet*/
 1d6:	b0 99       	sbic	0x16, 0	; 22
 1d8:	24 c0       	rjmp	.+72     	; 0x222 <microsecond+0x52>
		ret_val = (num_interrupts+1) * (1000000L / SAMPLE_RATE);
	else 
		ret_val = num_interrupts * (1000000L / SAMPLE_RATE);
 1da:	60 91 0a 01 	lds	r22, 0x010A
 1de:	70 91 0b 01 	lds	r23, 0x010B
 1e2:	80 91 0c 01 	lds	r24, 0x010C
 1e6:	90 91 0d 01 	lds	r25, 0x010D
 1ea:	24 ef       	ldi	r18, 0xF4	; 244
 1ec:	31 e0       	ldi	r19, 0x01	; 1
 1ee:	40 e0       	ldi	r20, 0x00	; 0
 1f0:	50 e0       	ldi	r21, 0x00	; 0
 1f2:	0e 94 61 01 	call	0x2c2	; 0x2c2 <__mulsi3>
	
	ret_val += (TCNT1 * 1000000L) / F_CPU;
 1f6:	20 91 84 00 	lds	r18, 0x0084
 1fa:	30 91 85 00 	lds	r19, 0x0085

	/* restore interrupts */
	SREG = oldSREG;
 1fe:	1f bf       	out	0x3f, r17	; 63
	if (TIFR1 & _BV(TOV1)) /* latest interrupt hasn't been counted yet*/
		ret_val = (num_interrupts+1) * (1000000L / SAMPLE_RATE);
	else 
		ret_val = num_interrupts * (1000000L / SAMPLE_RATE);
	
	ret_val += (TCNT1 * 1000000L) / F_CPU;
 200:	40 e0       	ldi	r20, 0x00	; 0
 202:	50 e0       	ldi	r21, 0x00	; 0
 204:	e4 e0       	ldi	r30, 0x04	; 4
 206:	55 95       	asr	r21
 208:	47 95       	ror	r20
 20a:	37 95       	ror	r19
 20c:	27 95       	ror	r18
 20e:	ea 95       	dec	r30
 210:	d1 f7       	brne	.-12     	; 0x206 <microsecond+0x36>
 212:	26 0f       	add	r18, r22
 214:	37 1f       	adc	r19, r23
 216:	48 1f       	adc	r20, r24
 218:	59 1f       	adc	r21, r25
	/* restore interrupts */
	SREG = oldSREG;

	return ret_val;
	
}
 21a:	b9 01       	movw	r22, r18
 21c:	ca 01       	movw	r24, r20
 21e:	1f 91       	pop	r17
 220:	08 95       	ret
	uint8_t oldSREG = SREG;
	cli();
	
	uint32_t ret_val;
	if (TIFR1 & _BV(TOV1)) /* latest interrupt hasn't been counted yet*/
		ret_val = (num_interrupts+1) * (1000000L / SAMPLE_RATE);
 222:	60 91 0a 01 	lds	r22, 0x010A
 226:	70 91 0b 01 	lds	r23, 0x010B
 22a:	80 91 0c 01 	lds	r24, 0x010C
 22e:	90 91 0d 01 	lds	r25, 0x010D
 232:	6f 5f       	subi	r22, 0xFF	; 255
 234:	7f 4f       	sbci	r23, 0xFF	; 255
 236:	8f 4f       	sbci	r24, 0xFF	; 255
 238:	9f 4f       	sbci	r25, 0xFF	; 255
 23a:	24 ef       	ldi	r18, 0xF4	; 244
 23c:	31 e0       	ldi	r19, 0x01	; 1
 23e:	40 e0       	ldi	r20, 0x00	; 0
 240:	50 e0       	ldi	r21, 0x00	; 0
 242:	0e 94 61 01 	call	0x2c2	; 0x2c2 <__mulsi3>
 246:	d7 cf       	rjmp	.-82     	; 0x1f6 <microsecond+0x26>

00000248 <init_pwm0>:
	
}


void init_pwm0() {
  TCCR0A |= _BV(WGM01) | _BV (WGM00); /*set fast pwm mode (table 14-8 p. 109) */
 248:	84 b5       	in	r24, 0x24	; 36
 24a:	83 60       	ori	r24, 0x03	; 3
 24c:	84 bd       	out	0x24, r24	; 36
  TCCR0A |= _BV(COM0B1); /*non-inverting mode (table 14-3) */
 24e:	84 b5       	in	r24, 0x24	; 36
 250:	80 62       	ori	r24, 0x20	; 32
 252:	84 bd       	out	0x24, r24	; 36
  TCCR0B |= _BV(CS00);   /*no prescaling(table 14-9)*/
 254:	85 b5       	in	r24, 0x25	; 37
 256:	81 60       	ori	r24, 0x01	; 1
 258:	85 bd       	out	0x25, r24	; 37


  OCR0B = 0x00;  /*output compare register 0xFF==full duty cycle */
 25a:	18 bc       	out	0x28, r1	; 40
  DDRD = _BV(5); /* (checkout pinout on p.2 upper right.)
 25c:	80 e2       	ldi	r24, 0x20	; 32
 25e:	8a b9       	out	0x0a, r24	; 10
                    0C0B is linked to pin d5 (arduino pin5) .*/
}
 260:	08 95       	ret

00000262 <cput>:

/*cput is the function for sending a single character to serial out */
int cput (char c, FILE* file) 
{
  /*19.6.1*/
  loop_until_bit_is_set(UCSR0A, UDRE0);
 262:	90 91 c0 00 	lds	r25, 0x00C0
 266:	95 ff       	sbrs	r25, 5
 268:	fc cf       	rjmp	.-8      	; 0x262 <cput>
  UDR0 = c;
 26a:	80 93 c6 00 	sts	0x00C6, r24
  return 0;
  
}
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	08 95       	ret

00000274 <cget>:
 *this will busy-wait until data is available
 * 19.7.1 p. 187 
 */
int cget(FILE* file)
{
  loop_until_bit_is_set(UCSR0A, RXC0);
 274:	80 91 c0 00 	lds	r24, 0x00C0
 278:	87 ff       	sbrs	r24, 7
 27a:	fc cf       	rjmp	.-8      	; 0x274 <cget>
  return UDR0;
 27c:	80 91 c6 00 	lds	r24, 0x00C6
}
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	08 95       	ret

00000284 <init_serial_9600>:
{
  /*this code taken from documentation for <util/setbaud.h> */
#define BAUD 9600
#include <util/setbaud.h>
  /*these are the baud rate registers*/
  UBRR0H = UBRRH_VALUE;
 284:	10 92 c5 00 	sts	0x00C5, r1
  UBRR0L = UBRRL_VALUE;
 288:	87 e6       	ldi	r24, 0x67	; 103
 28a:	80 93 c4 00 	sts	0x00C4, r24
#if USE_2X
  UCSR0A |= (1 << U2X0);
#else
  UCSR0A &= ~(1 << U2X0);
 28e:	e0 ec       	ldi	r30, 0xC0	; 192
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	80 81       	ld	r24, Z
 294:	8d 7f       	andi	r24, 0xFD	; 253
 296:	80 83       	st	Z, r24
#endif

  /*set 8 data bits ( sec 19.4, p. 203, table 19.10)*/
  /*1 stop bit and no parity are defaults */
  UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
 298:	86 e0       	ldi	r24, 0x06	; 6
 29a:	80 93 c2 00 	sts	0x00C2, r24

  /*Enable receiver and transmitter */
  UCSR0B = _BV(RXEN0) | _BV(TXEN0);
 29e:	88 e1       	ldi	r24, 0x18	; 24
 2a0:	80 93 c1 00 	sts	0x00C1, r24
  
}
 2a4:	08 95       	ret

000002a6 <init_serial_write>:
  return UDR0;
}

FILE* init_serial_write()
{
  return fdevopen(cput, NULL);
 2a6:	81 e3       	ldi	r24, 0x31	; 49
 2a8:	91 e0       	ldi	r25, 0x01	; 1
 2aa:	60 e0       	ldi	r22, 0x00	; 0
 2ac:	70 e0       	ldi	r23, 0x00	; 0
 2ae:	0e 94 80 01 	call	0x300	; 0x300 <fdevopen>
}
 2b2:	08 95       	ret

000002b4 <init_serial_read>:

FILE* init_serial_read() 
{
  return fdevopen(NULL, cget);
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	6a e3       	ldi	r22, 0x3A	; 58
 2ba:	71 e0       	ldi	r23, 0x01	; 1
 2bc:	0e 94 80 01 	call	0x300	; 0x300 <fdevopen>
  
}
 2c0:	08 95       	ret

000002c2 <__mulsi3>:
 2c2:	62 9f       	mul	r22, r18
 2c4:	d0 01       	movw	r26, r0
 2c6:	73 9f       	mul	r23, r19
 2c8:	f0 01       	movw	r30, r0
 2ca:	82 9f       	mul	r24, r18
 2cc:	e0 0d       	add	r30, r0
 2ce:	f1 1d       	adc	r31, r1
 2d0:	64 9f       	mul	r22, r20
 2d2:	e0 0d       	add	r30, r0
 2d4:	f1 1d       	adc	r31, r1
 2d6:	92 9f       	mul	r25, r18
 2d8:	f0 0d       	add	r31, r0
 2da:	83 9f       	mul	r24, r19
 2dc:	f0 0d       	add	r31, r0
 2de:	74 9f       	mul	r23, r20
 2e0:	f0 0d       	add	r31, r0
 2e2:	65 9f       	mul	r22, r21
 2e4:	f0 0d       	add	r31, r0
 2e6:	99 27       	eor	r25, r25
 2e8:	72 9f       	mul	r23, r18
 2ea:	b0 0d       	add	r27, r0
 2ec:	e1 1d       	adc	r30, r1
 2ee:	f9 1f       	adc	r31, r25
 2f0:	63 9f       	mul	r22, r19
 2f2:	b0 0d       	add	r27, r0
 2f4:	e1 1d       	adc	r30, r1
 2f6:	f9 1f       	adc	r31, r25
 2f8:	bd 01       	movw	r22, r26
 2fa:	cf 01       	movw	r24, r30
 2fc:	11 24       	eor	r1, r1
 2fe:	08 95       	ret

00000300 <fdevopen>:
 300:	0f 93       	push	r16
 302:	1f 93       	push	r17
 304:	cf 93       	push	r28
 306:	df 93       	push	r29
 308:	8c 01       	movw	r16, r24
 30a:	eb 01       	movw	r28, r22
 30c:	00 97       	sbiw	r24, 0x00	; 0
 30e:	11 f4       	brne	.+4      	; 0x314 <fdevopen+0x14>
 310:	20 97       	sbiw	r28, 0x00	; 0
 312:	c9 f1       	breq	.+114    	; 0x386 <fdevopen+0x86>
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	6e e0       	ldi	r22, 0x0E	; 14
 31a:	70 e0       	ldi	r23, 0x00	; 0
 31c:	0e 94 cb 01 	call	0x396	; 0x396 <calloc>
 320:	fc 01       	movw	r30, r24
 322:	9c 01       	movw	r18, r24
 324:	00 97       	sbiw	r24, 0x00	; 0
 326:	89 f1       	breq	.+98     	; 0x38a <fdevopen+0x8a>
 328:	80 e8       	ldi	r24, 0x80	; 128
 32a:	83 83       	std	Z+3, r24	; 0x03
 32c:	20 97       	sbiw	r28, 0x00	; 0
 32e:	71 f0       	breq	.+28     	; 0x34c <fdevopen+0x4c>
 330:	d3 87       	std	Z+11, r29	; 0x0b
 332:	c2 87       	std	Z+10, r28	; 0x0a
 334:	81 e8       	ldi	r24, 0x81	; 129
 336:	83 83       	std	Z+3, r24	; 0x03
 338:	80 91 0e 01 	lds	r24, 0x010E
 33c:	90 91 0f 01 	lds	r25, 0x010F
 340:	00 97       	sbiw	r24, 0x00	; 0
 342:	21 f4       	brne	.+8      	; 0x34c <fdevopen+0x4c>
 344:	f0 93 0f 01 	sts	0x010F, r31
 348:	e0 93 0e 01 	sts	0x010E, r30
 34c:	01 15       	cp	r16, r1
 34e:	11 05       	cpc	r17, r1
 350:	e1 f0       	breq	.+56     	; 0x38a <fdevopen+0x8a>
 352:	11 87       	std	Z+9, r17	; 0x09
 354:	00 87       	std	Z+8, r16	; 0x08
 356:	83 81       	ldd	r24, Z+3	; 0x03
 358:	82 60       	ori	r24, 0x02	; 2
 35a:	83 83       	std	Z+3, r24	; 0x03
 35c:	80 91 10 01 	lds	r24, 0x0110
 360:	90 91 11 01 	lds	r25, 0x0111
 364:	00 97       	sbiw	r24, 0x00	; 0
 366:	89 f4       	brne	.+34     	; 0x38a <fdevopen+0x8a>
 368:	f0 93 11 01 	sts	0x0111, r31
 36c:	e0 93 10 01 	sts	0x0110, r30
 370:	80 91 12 01 	lds	r24, 0x0112
 374:	90 91 13 01 	lds	r25, 0x0113
 378:	00 97       	sbiw	r24, 0x00	; 0
 37a:	39 f4       	brne	.+14     	; 0x38a <fdevopen+0x8a>
 37c:	f0 93 13 01 	sts	0x0113, r31
 380:	e0 93 12 01 	sts	0x0112, r30
 384:	02 c0       	rjmp	.+4      	; 0x38a <fdevopen+0x8a>
 386:	20 e0       	ldi	r18, 0x00	; 0
 388:	30 e0       	ldi	r19, 0x00	; 0
 38a:	c9 01       	movw	r24, r18
 38c:	df 91       	pop	r29
 38e:	cf 91       	pop	r28
 390:	1f 91       	pop	r17
 392:	0f 91       	pop	r16
 394:	08 95       	ret

00000396 <calloc>:
 396:	ef 92       	push	r14
 398:	ff 92       	push	r15
 39a:	0f 93       	push	r16
 39c:	1f 93       	push	r17
 39e:	cf 93       	push	r28
 3a0:	df 93       	push	r29
 3a2:	68 9f       	mul	r22, r24
 3a4:	80 01       	movw	r16, r0
 3a6:	69 9f       	mul	r22, r25
 3a8:	10 0d       	add	r17, r0
 3aa:	78 9f       	mul	r23, r24
 3ac:	10 0d       	add	r17, r0
 3ae:	11 24       	eor	r1, r1
 3b0:	c8 01       	movw	r24, r16
 3b2:	0e 94 ef 01 	call	0x3de	; 0x3de <malloc>
 3b6:	e8 2e       	mov	r14, r24
 3b8:	e7 01       	movw	r28, r14
 3ba:	7e 01       	movw	r14, r28
 3bc:	f9 2e       	mov	r15, r25
 3be:	e7 01       	movw	r28, r14
 3c0:	20 97       	sbiw	r28, 0x00	; 0
 3c2:	31 f0       	breq	.+12     	; 0x3d0 <calloc+0x3a>
 3c4:	8e 2d       	mov	r24, r14
 3c6:	60 e0       	ldi	r22, 0x00	; 0
 3c8:	70 e0       	ldi	r23, 0x00	; 0
 3ca:	a8 01       	movw	r20, r16
 3cc:	0e 94 24 03 	call	0x648	; 0x648 <memset>
 3d0:	7e 01       	movw	r14, r28
 3d2:	ce 01       	movw	r24, r28
 3d4:	cd b7       	in	r28, 0x3d	; 61
 3d6:	de b7       	in	r29, 0x3e	; 62
 3d8:	e6 e0       	ldi	r30, 0x06	; 6
 3da:	0c 94 37 03 	jmp	0x66e	; 0x66e <__epilogue_restores__+0x18>

000003de <malloc>:
 3de:	cf 93       	push	r28
 3e0:	df 93       	push	r29
 3e2:	82 30       	cpi	r24, 0x02	; 2
 3e4:	91 05       	cpc	r25, r1
 3e6:	10 f4       	brcc	.+4      	; 0x3ec <malloc+0xe>
 3e8:	82 e0       	ldi	r24, 0x02	; 2
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	e0 91 16 01 	lds	r30, 0x0116
 3f0:	f0 91 17 01 	lds	r31, 0x0117
 3f4:	20 e0       	ldi	r18, 0x00	; 0
 3f6:	30 e0       	ldi	r19, 0x00	; 0
 3f8:	40 e0       	ldi	r20, 0x00	; 0
 3fa:	50 e0       	ldi	r21, 0x00	; 0
 3fc:	28 c0       	rjmp	.+80     	; 0x44e <malloc+0x70>
 3fe:	60 81       	ld	r22, Z
 400:	71 81       	ldd	r23, Z+1	; 0x01
 402:	68 17       	cp	r22, r24
 404:	79 07       	cpc	r23, r25
 406:	c8 f0       	brcs	.+50     	; 0x43a <malloc+0x5c>
 408:	68 17       	cp	r22, r24
 40a:	79 07       	cpc	r23, r25
 40c:	81 f4       	brne	.+32     	; 0x42e <malloc+0x50>
 40e:	82 81       	ldd	r24, Z+2	; 0x02
 410:	93 81       	ldd	r25, Z+3	; 0x03
 412:	41 15       	cp	r20, r1
 414:	51 05       	cpc	r21, r1
 416:	31 f0       	breq	.+12     	; 0x424 <malloc+0x46>
 418:	da 01       	movw	r26, r20
 41a:	13 96       	adiw	r26, 0x03	; 3
 41c:	9c 93       	st	X, r25
 41e:	8e 93       	st	-X, r24
 420:	12 97       	sbiw	r26, 0x02	; 2
 422:	2d c0       	rjmp	.+90     	; 0x47e <malloc+0xa0>
 424:	90 93 17 01 	sts	0x0117, r25
 428:	80 93 16 01 	sts	0x0116, r24
 42c:	28 c0       	rjmp	.+80     	; 0x47e <malloc+0xa0>
 42e:	21 15       	cp	r18, r1
 430:	31 05       	cpc	r19, r1
 432:	29 f0       	breq	.+10     	; 0x43e <malloc+0x60>
 434:	62 17       	cp	r22, r18
 436:	73 07       	cpc	r23, r19
 438:	10 f0       	brcs	.+4      	; 0x43e <malloc+0x60>
 43a:	b9 01       	movw	r22, r18
 43c:	02 c0       	rjmp	.+4      	; 0x442 <malloc+0x64>
 43e:	ea 01       	movw	r28, r20
 440:	df 01       	movw	r26, r30
 442:	af 01       	movw	r20, r30
 444:	9b 01       	movw	r18, r22
 446:	72 81       	ldd	r23, Z+2	; 0x02
 448:	63 81       	ldd	r22, Z+3	; 0x03
 44a:	e7 2f       	mov	r30, r23
 44c:	f6 2f       	mov	r31, r22
 44e:	30 97       	sbiw	r30, 0x00	; 0
 450:	b1 f6       	brne	.-84     	; 0x3fe <malloc+0x20>
 452:	21 15       	cp	r18, r1
 454:	31 05       	cpc	r19, r1
 456:	01 f1       	breq	.+64     	; 0x498 <malloc+0xba>
 458:	28 1b       	sub	r18, r24
 45a:	39 0b       	sbc	r19, r25
 45c:	24 30       	cpi	r18, 0x04	; 4
 45e:	31 05       	cpc	r19, r1
 460:	80 f4       	brcc	.+32     	; 0x482 <malloc+0xa4>
 462:	12 96       	adiw	r26, 0x02	; 2
 464:	8d 91       	ld	r24, X+
 466:	9c 91       	ld	r25, X
 468:	13 97       	sbiw	r26, 0x03	; 3
 46a:	20 97       	sbiw	r28, 0x00	; 0
 46c:	19 f0       	breq	.+6      	; 0x474 <malloc+0x96>
 46e:	9b 83       	std	Y+3, r25	; 0x03
 470:	8a 83       	std	Y+2, r24	; 0x02
 472:	04 c0       	rjmp	.+8      	; 0x47c <malloc+0x9e>
 474:	90 93 17 01 	sts	0x0117, r25
 478:	80 93 16 01 	sts	0x0116, r24
 47c:	fd 01       	movw	r30, r26
 47e:	32 96       	adiw	r30, 0x02	; 2
 480:	46 c0       	rjmp	.+140    	; 0x50e <malloc+0x130>
 482:	fd 01       	movw	r30, r26
 484:	e2 0f       	add	r30, r18
 486:	f3 1f       	adc	r31, r19
 488:	81 93       	st	Z+, r24
 48a:	91 93       	st	Z+, r25
 48c:	22 50       	subi	r18, 0x02	; 2
 48e:	30 40       	sbci	r19, 0x00	; 0
 490:	11 96       	adiw	r26, 0x01	; 1
 492:	3c 93       	st	X, r19
 494:	2e 93       	st	-X, r18
 496:	3b c0       	rjmp	.+118    	; 0x50e <malloc+0x130>
 498:	20 91 14 01 	lds	r18, 0x0114
 49c:	30 91 15 01 	lds	r19, 0x0115
 4a0:	21 15       	cp	r18, r1
 4a2:	31 05       	cpc	r19, r1
 4a4:	41 f4       	brne	.+16     	; 0x4b6 <malloc+0xd8>
 4a6:	20 91 02 01 	lds	r18, 0x0102
 4aa:	30 91 03 01 	lds	r19, 0x0103
 4ae:	30 93 15 01 	sts	0x0115, r19
 4b2:	20 93 14 01 	sts	0x0114, r18
 4b6:	20 91 04 01 	lds	r18, 0x0104
 4ba:	30 91 05 01 	lds	r19, 0x0105
 4be:	21 15       	cp	r18, r1
 4c0:	31 05       	cpc	r19, r1
 4c2:	41 f4       	brne	.+16     	; 0x4d4 <malloc+0xf6>
 4c4:	2d b7       	in	r18, 0x3d	; 61
 4c6:	3e b7       	in	r19, 0x3e	; 62
 4c8:	40 91 00 01 	lds	r20, 0x0100
 4cc:	50 91 01 01 	lds	r21, 0x0101
 4d0:	24 1b       	sub	r18, r20
 4d2:	35 0b       	sbc	r19, r21
 4d4:	e0 91 14 01 	lds	r30, 0x0114
 4d8:	f0 91 15 01 	lds	r31, 0x0115
 4dc:	e2 17       	cp	r30, r18
 4de:	f3 07       	cpc	r31, r19
 4e0:	a0 f4       	brcc	.+40     	; 0x50a <malloc+0x12c>
 4e2:	2e 1b       	sub	r18, r30
 4e4:	3f 0b       	sbc	r19, r31
 4e6:	28 17       	cp	r18, r24
 4e8:	39 07       	cpc	r19, r25
 4ea:	78 f0       	brcs	.+30     	; 0x50a <malloc+0x12c>
 4ec:	ac 01       	movw	r20, r24
 4ee:	4e 5f       	subi	r20, 0xFE	; 254
 4f0:	5f 4f       	sbci	r21, 0xFF	; 255
 4f2:	24 17       	cp	r18, r20
 4f4:	35 07       	cpc	r19, r21
 4f6:	48 f0       	brcs	.+18     	; 0x50a <malloc+0x12c>
 4f8:	4e 0f       	add	r20, r30
 4fa:	5f 1f       	adc	r21, r31
 4fc:	50 93 15 01 	sts	0x0115, r21
 500:	40 93 14 01 	sts	0x0114, r20
 504:	81 93       	st	Z+, r24
 506:	91 93       	st	Z+, r25
 508:	02 c0       	rjmp	.+4      	; 0x50e <malloc+0x130>
 50a:	e0 e0       	ldi	r30, 0x00	; 0
 50c:	f0 e0       	ldi	r31, 0x00	; 0
 50e:	cf 01       	movw	r24, r30
 510:	df 91       	pop	r29
 512:	cf 91       	pop	r28
 514:	08 95       	ret

00000516 <free>:
 516:	cf 93       	push	r28
 518:	df 93       	push	r29
 51a:	00 97       	sbiw	r24, 0x00	; 0
 51c:	09 f4       	brne	.+2      	; 0x520 <free+0xa>
 51e:	91 c0       	rjmp	.+290    	; 0x642 <free+0x12c>
 520:	fc 01       	movw	r30, r24
 522:	32 97       	sbiw	r30, 0x02	; 2
 524:	13 82       	std	Z+3, r1	; 0x03
 526:	12 82       	std	Z+2, r1	; 0x02
 528:	60 91 16 01 	lds	r22, 0x0116
 52c:	70 91 17 01 	lds	r23, 0x0117
 530:	61 15       	cp	r22, r1
 532:	71 05       	cpc	r23, r1
 534:	81 f4       	brne	.+32     	; 0x556 <free+0x40>
 536:	20 81       	ld	r18, Z
 538:	31 81       	ldd	r19, Z+1	; 0x01
 53a:	28 0f       	add	r18, r24
 53c:	39 1f       	adc	r19, r25
 53e:	80 91 14 01 	lds	r24, 0x0114
 542:	90 91 15 01 	lds	r25, 0x0115
 546:	82 17       	cp	r24, r18
 548:	93 07       	cpc	r25, r19
 54a:	99 f5       	brne	.+102    	; 0x5b2 <free+0x9c>
 54c:	f0 93 15 01 	sts	0x0115, r31
 550:	e0 93 14 01 	sts	0x0114, r30
 554:	76 c0       	rjmp	.+236    	; 0x642 <free+0x12c>
 556:	db 01       	movw	r26, r22
 558:	80 e0       	ldi	r24, 0x00	; 0
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	02 c0       	rjmp	.+4      	; 0x562 <free+0x4c>
 55e:	cd 01       	movw	r24, r26
 560:	d9 01       	movw	r26, r18
 562:	ae 17       	cp	r26, r30
 564:	bf 07       	cpc	r27, r31
 566:	48 f4       	brcc	.+18     	; 0x57a <free+0x64>
 568:	12 96       	adiw	r26, 0x02	; 2
 56a:	2d 91       	ld	r18, X+
 56c:	3c 91       	ld	r19, X
 56e:	13 97       	sbiw	r26, 0x03	; 3
 570:	21 15       	cp	r18, r1
 572:	31 05       	cpc	r19, r1
 574:	a1 f7       	brne	.-24     	; 0x55e <free+0x48>
 576:	cd 01       	movw	r24, r26
 578:	21 c0       	rjmp	.+66     	; 0x5bc <free+0xa6>
 57a:	b3 83       	std	Z+3, r27	; 0x03
 57c:	a2 83       	std	Z+2, r26	; 0x02
 57e:	ef 01       	movw	r28, r30
 580:	49 91       	ld	r20, Y+
 582:	59 91       	ld	r21, Y+
 584:	9e 01       	movw	r18, r28
 586:	24 0f       	add	r18, r20
 588:	35 1f       	adc	r19, r21
 58a:	a2 17       	cp	r26, r18
 58c:	b3 07       	cpc	r27, r19
 58e:	79 f4       	brne	.+30     	; 0x5ae <free+0x98>
 590:	2d 91       	ld	r18, X+
 592:	3c 91       	ld	r19, X
 594:	11 97       	sbiw	r26, 0x01	; 1
 596:	24 0f       	add	r18, r20
 598:	35 1f       	adc	r19, r21
 59a:	2e 5f       	subi	r18, 0xFE	; 254
 59c:	3f 4f       	sbci	r19, 0xFF	; 255
 59e:	31 83       	std	Z+1, r19	; 0x01
 5a0:	20 83       	st	Z, r18
 5a2:	12 96       	adiw	r26, 0x02	; 2
 5a4:	2d 91       	ld	r18, X+
 5a6:	3c 91       	ld	r19, X
 5a8:	13 97       	sbiw	r26, 0x03	; 3
 5aa:	33 83       	std	Z+3, r19	; 0x03
 5ac:	22 83       	std	Z+2, r18	; 0x02
 5ae:	00 97       	sbiw	r24, 0x00	; 0
 5b0:	29 f4       	brne	.+10     	; 0x5bc <free+0xa6>
 5b2:	f0 93 17 01 	sts	0x0117, r31
 5b6:	e0 93 16 01 	sts	0x0116, r30
 5ba:	43 c0       	rjmp	.+134    	; 0x642 <free+0x12c>
 5bc:	dc 01       	movw	r26, r24
 5be:	13 96       	adiw	r26, 0x03	; 3
 5c0:	fc 93       	st	X, r31
 5c2:	ee 93       	st	-X, r30
 5c4:	12 97       	sbiw	r26, 0x02	; 2
 5c6:	4d 91       	ld	r20, X+
 5c8:	5d 91       	ld	r21, X+
 5ca:	a4 0f       	add	r26, r20
 5cc:	b5 1f       	adc	r27, r21
 5ce:	ea 17       	cp	r30, r26
 5d0:	fb 07       	cpc	r31, r27
 5d2:	69 f4       	brne	.+26     	; 0x5ee <free+0xd8>
 5d4:	20 81       	ld	r18, Z
 5d6:	31 81       	ldd	r19, Z+1	; 0x01
 5d8:	24 0f       	add	r18, r20
 5da:	35 1f       	adc	r19, r21
 5dc:	2e 5f       	subi	r18, 0xFE	; 254
 5de:	3f 4f       	sbci	r19, 0xFF	; 255
 5e0:	ec 01       	movw	r28, r24
 5e2:	39 83       	std	Y+1, r19	; 0x01
 5e4:	28 83       	st	Y, r18
 5e6:	22 81       	ldd	r18, Z+2	; 0x02
 5e8:	33 81       	ldd	r19, Z+3	; 0x03
 5ea:	3b 83       	std	Y+3, r19	; 0x03
 5ec:	2a 83       	std	Y+2, r18	; 0x02
 5ee:	e0 e0       	ldi	r30, 0x00	; 0
 5f0:	f0 e0       	ldi	r31, 0x00	; 0
 5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <free+0xe2>
 5f4:	fb 01       	movw	r30, r22
 5f6:	bc 01       	movw	r22, r24
 5f8:	db 01       	movw	r26, r22
 5fa:	12 96       	adiw	r26, 0x02	; 2
 5fc:	8d 91       	ld	r24, X+
 5fe:	9c 91       	ld	r25, X
 600:	13 97       	sbiw	r26, 0x03	; 3
 602:	00 97       	sbiw	r24, 0x00	; 0
 604:	b9 f7       	brne	.-18     	; 0x5f4 <free+0xde>
 606:	9b 01       	movw	r18, r22
 608:	2e 5f       	subi	r18, 0xFE	; 254
 60a:	3f 4f       	sbci	r19, 0xFF	; 255
 60c:	8d 91       	ld	r24, X+
 60e:	9c 91       	ld	r25, X
 610:	11 97       	sbiw	r26, 0x01	; 1
 612:	82 0f       	add	r24, r18
 614:	93 1f       	adc	r25, r19
 616:	40 91 14 01 	lds	r20, 0x0114
 61a:	50 91 15 01 	lds	r21, 0x0115
 61e:	48 17       	cp	r20, r24
 620:	59 07       	cpc	r21, r25
 622:	79 f4       	brne	.+30     	; 0x642 <free+0x12c>
 624:	30 97       	sbiw	r30, 0x00	; 0
 626:	29 f4       	brne	.+10     	; 0x632 <free+0x11c>
 628:	10 92 17 01 	sts	0x0117, r1
 62c:	10 92 16 01 	sts	0x0116, r1
 630:	02 c0       	rjmp	.+4      	; 0x636 <free+0x120>
 632:	13 82       	std	Z+3, r1	; 0x03
 634:	12 82       	std	Z+2, r1	; 0x02
 636:	22 50       	subi	r18, 0x02	; 2
 638:	30 40       	sbci	r19, 0x00	; 0
 63a:	30 93 15 01 	sts	0x0115, r19
 63e:	20 93 14 01 	sts	0x0114, r18
 642:	df 91       	pop	r29
 644:	cf 91       	pop	r28
 646:	08 95       	ret

00000648 <memset>:
 648:	dc 01       	movw	r26, r24
 64a:	01 c0       	rjmp	.+2      	; 0x64e <memset+0x6>
 64c:	6d 93       	st	X+, r22
 64e:	41 50       	subi	r20, 0x01	; 1
 650:	50 40       	sbci	r21, 0x00	; 0
 652:	e0 f7       	brcc	.-8      	; 0x64c <memset+0x4>
 654:	08 95       	ret

00000656 <__epilogue_restores__>:
 656:	2a 88       	ldd	r2, Y+18	; 0x12
 658:	39 88       	ldd	r3, Y+17	; 0x11
 65a:	48 88       	ldd	r4, Y+16	; 0x10
 65c:	5f 84       	ldd	r5, Y+15	; 0x0f
 65e:	6e 84       	ldd	r6, Y+14	; 0x0e
 660:	7d 84       	ldd	r7, Y+13	; 0x0d
 662:	8c 84       	ldd	r8, Y+12	; 0x0c
 664:	9b 84       	ldd	r9, Y+11	; 0x0b
 666:	aa 84       	ldd	r10, Y+10	; 0x0a
 668:	b9 84       	ldd	r11, Y+9	; 0x09
 66a:	c8 84       	ldd	r12, Y+8	; 0x08
 66c:	df 80       	ldd	r13, Y+7	; 0x07
 66e:	ee 80       	ldd	r14, Y+6	; 0x06
 670:	fd 80       	ldd	r15, Y+5	; 0x05
 672:	0c 81       	ldd	r16, Y+4	; 0x04
 674:	1b 81       	ldd	r17, Y+3	; 0x03
 676:	aa 81       	ldd	r26, Y+2	; 0x02
 678:	b9 81       	ldd	r27, Y+1	; 0x01
 67a:	ce 0f       	add	r28, r30
 67c:	d1 1d       	adc	r29, r1
 67e:	0f b6       	in	r0, 0x3f	; 63
 680:	f8 94       	cli
 682:	de bf       	out	0x3e, r29	; 62
 684:	0f be       	out	0x3f, r0	; 63
 686:	cd bf       	out	0x3d, r28	; 61
 688:	ed 01       	movw	r28, r26
 68a:	08 95       	ret

0000068c <_exit>:
 68c:	f8 94       	cli

0000068e <__stop_program>:
 68e:	ff cf       	rjmp	.-2      	; 0x68e <__stop_program>
